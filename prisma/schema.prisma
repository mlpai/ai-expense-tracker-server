generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(uuid())
  name              String
  email             String             @unique
  createdAt         DateTime           @default(now())
  passwordHash      String
  updatedAt         DateTime           @updatedAt
  aiSuggestions     AiSuggestion[]
  bankAccounts      BankAccount[]
  budgets           Budget[]
  deposits          Deposit[]
  expenses          Expense[]
  monthlyReports    MonthlyReport[]
  notifications     Notification[]
  receipts          Receipt[]
  recurringExpenses RecurringExpense[]
}

model BankAccount {
  id            String    @id @default(uuid())
  userId        String
  name          String
  accountNumber String    @unique
  bankName      String
  isDefault     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  balance       Float     @default(0)
  user          User      @relation(fields: [userId], references: [id])
  deposits      Deposit[]
  expenses      Expense[]
}

model ExpenseCategory {
  id             String    @id @default(uuid())
  name           String    @unique
  description    String?
  icon           String?   // For UI display
  color          String?   // For UI display
  isDefault      Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  expenses       Expense[]
  recurringExpenses RecurringExpense[]
}

model DepositType {
  id             String    @id @default(uuid())
  name           String    @unique
  description    String?
  icon           String?
  color          String?
  createdAt      DateTime  @default(now())

  deposits       Deposit[]
}

model Expense {
  id             String        @id @default(uuid())
  user           User          @relation(fields: [userId], references: [id])
  userId         String
  bankAccount    BankAccount   @relation(fields: [bankAccountId], references: [id])
  bankAccountId  String
  category       ExpenseCategory @relation(fields: [categoryId], references: [id])
  categoryId     String
  amount         Decimal       @db.Decimal(12, 2)
  note           String?
  date           DateTime      @default(now())
  isRecurring    Boolean       @default(false)
  recurringExpenseId String?   // Reference to recurring expense if applicable
  receiptId      String?       // Reference to receipt if scanned
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now())

  receipt        Receipt?      @relation(fields: [receiptId], references: [id])
  recurringExpense RecurringExpense? @relation(fields: [recurringExpenseId], references: [id])
}

model Deposit {
  id             String        @id @default(uuid())
  user           User          @relation(fields: [userId], references: [id])
  userId         String
  bankAccount    BankAccount   @relation(fields: [bankAccountId], references: [id])
  bankAccountId  String
  depositType    DepositType   @relation(fields: [depositTypeId], references: [id])
  depositTypeId  String
  amount         Decimal       @db.Decimal(12, 2)
  note           String?
  date           DateTime      @default(now())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now())
}

model RecurringExpense {
  id             String        @id @default(uuid())
  user           User          @relation(fields: [userId], references: [id])
  userId         String
  category       ExpenseCategory @relation(fields: [categoryId], references: [id])
  categoryId     String
  amount         Decimal       @db.Decimal(12, 2)
  note           String?
  frequency      String        // 'DAILY', 'WEEKLY', 'MONTHLY', 'YEARLY'
  startDate      DateTime
  endDate        DateTime?     // null for indefinite
  nextDueDate    DateTime
  isActive       Boolean       @default(true)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now())

  expenses       Expense[]
}

model Receipt {
  id            String    @id @default(uuid())
  userId        String
  imageUrl      String
  originalText  String?
  processedData Json?
  status        String    @default("PENDING")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
  expenses      Expense[]
  user          User      @relation(fields: [userId], references: [id])
}

model Budget {
  id                  String        @id @default(uuid())
  userId              String
  month               Int
  year                Int
  amountLimit         Decimal       @db.Decimal(12, 2)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  spentAmount         Decimal       @default(0) @db.Decimal(12, 2)
  thresholdPercentage Int           @default(80)
  user                User          @relation(fields: [userId], references: [id])
  alerts              BudgetAlert[]
}

model BudgetAlert {
  id        String   @id @default(uuid())
  budgetId  String
  alertType String
  message   String
  createdAt DateTime @default(now())
  isRead    Boolean  @default(false)
  budget    Budget   @relation(fields: [budgetId], references: [id])
}

model AiSuggestion {
  id         String   @id @default(uuid())
  userId     String
  title      String
  suggestion String
  createdAt  DateTime @default(now())
  category   String   @default("BUDGET")
  isRead     Boolean  @default(false)
  priority   String   @default("MEDIUM")
  user       User     @relation(fields: [userId], references: [id])
}

model MonthlyReport {
  id           String   @id @default(uuid())
  userId       String
  month        Int
  year         Int
  totalExpense Decimal  @db.Decimal(12, 2)
  generatedAt  DateTime @default(now())
  reportData   Json
  aiInsights   Json?
  budgetStatus String   @default("ON_TRACK")
  netSavings   Decimal  @default(0) @db.Decimal(12, 2)
  totalIncome  Decimal  @default(0) @db.Decimal(12, 2)
  user         User     @relation(fields: [userId], references: [id])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  title     String
  message   String
  type      String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}
