// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid())
  email          String    @unique
  passwordHash   String
  name           String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  bankAccounts   BankAccount[]
  expenses       Expense[]
  deposits       Deposit[]
  recurringExpenses RecurringExpense[]
  receipts       Receipt[]
  budgets        Budget[]
  aiSuggestions  AiSuggestion[]
  monthlyReports MonthlyReport[]
  notifications  Notification[]
}

model BankAccount {
  id             String   @id @default(uuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  name           String
  accountNumber  String   @unique
  balance        Float    @default(0)
  bankName       String
  isDefault      Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  expenses       Expense[]
  deposits       Deposit[]
}

model ExpenseCategory {
  id             String    @id @default(uuid())
  name           String    @unique
  description    String?
  icon           String?   // For UI display
  color          String?   // For UI display
  isDefault      Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  expenseTypes   ExpenseType[]
}

model ExpenseType {
  id             String    @id @default(uuid())
  name           String    @unique
  description    String?
  categoryId     String
  category       ExpenseCategory @relation(fields: [categoryId], references: [id])
  createdAt      DateTime  @default(now())

  expenses       Expense[]
  recurringExpenses RecurringExpense[]
}

model DepositType {
  id             String    @id @default(uuid())
  name           String    @unique
  description    String?
  icon           String?
  color          String?
  createdAt      DateTime  @default(now())

  deposits       Deposit[]
}

model Expense {
  id             String        @id @default(uuid())
  user           User          @relation(fields: [userId], references: [id])
  userId         String
  bankAccount    BankAccount   @relation(fields: [bankAccountId], references: [id])
  bankAccountId  String
  expenseType    ExpenseType   @relation(fields: [expenseTypeId], references: [id])
  expenseTypeId  String
  amount         Decimal       @db.Decimal(12, 2)
  note           String?
  date           DateTime      @default(now())
  isRecurring    Boolean       @default(false)
  recurringExpenseId String?   // Reference to recurring expense if applicable
  receiptId      String?       // Reference to receipt if scanned
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now())

  receipt        Receipt?      @relation(fields: [receiptId], references: [id])
  recurringExpense RecurringExpense? @relation(fields: [recurringExpenseId], references: [id])
}

model Deposit {
  id             String        @id @default(uuid())
  user           User          @relation(fields: [userId], references: [id])
  userId         String
  bankAccount    BankAccount   @relation(fields: [bankAccountId], references: [id])
  bankAccountId  String
  depositType    DepositType   @relation(fields: [depositTypeId], references: [id])
  depositTypeId  String
  amount         Decimal       @db.Decimal(12, 2)
  note           String?
  date           DateTime      @default(now())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now())
}

model RecurringExpense {
  id             String        @id @default(uuid())
  user           User          @relation(fields: [userId], references: [id])
  userId         String
  expenseType    ExpenseType   @relation(fields: [expenseTypeId], references: [id])
  expenseTypeId  String
  amount         Decimal       @db.Decimal(12, 2)
  note           String?
  frequency      String        // 'DAILY', 'WEEKLY', 'MONTHLY', 'YEARLY'
  startDate      DateTime
  endDate        DateTime?     // null for indefinite
  nextDueDate    DateTime
  isActive       Boolean       @default(true)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now())

  expenses       Expense[]
}

model Receipt {
  id             String    @id @default(uuid())
  user           User      @relation(fields: [userId], references: [id])
  userId         String
  imageUrl       String
  originalText   String?   // Raw OCR text
  processedData  Json?     // AI processed data
  status         String    @default("PENDING") // 'PENDING', 'PROCESSED', 'FAILED'
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now())

  expenses       Expense[]
}

model Budget {
  id             String        @id @default(uuid())
  user           User          @relation(fields: [userId], references: [id])
  userId         String
  month          Int
  year           Int
  amountLimit    Decimal       @db.Decimal(12, 2)
  spentAmount    Decimal       @db.Decimal(12, 2) @default(0)
  thresholdPercentage Int      @default(80) // Alert when 80% of budget is spent
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  alerts         BudgetAlert[]
}

model BudgetAlert {
  id             String     @id @default(uuid())
  budget         Budget     @relation(fields: [budgetId], references: [id])
  budgetId       String
  alertType      String     // 'THRESHOLD_REACHED' | 'EXCEEDED'
  message        String
  isRead         Boolean    @default(false)
  createdAt      DateTime   @default(now())
}

model AiSuggestion {
  id             String    @id @default(uuid())
  user           User      @relation(fields: [userId], references: [id])
  userId         String
  title          String
  suggestion     String
  category       String    @default("BUDGET") // 'BUDGET', 'SAVINGS', 'SPENDING_PATTERN', 'INVESTMENT'
  priority       String    @default("MEDIUM") // 'LOW', 'MEDIUM', 'HIGH'
  isRead         Boolean   @default(false)
  createdAt      DateTime  @default(now())
}

model MonthlyReport {
  id             String    @id @default(uuid())
  user           User      @relation(fields: [userId], references: [id])
  userId         String
  month          Int
  year           Int
  totalExpense   Decimal   @db.Decimal(12, 2)
  totalIncome    Decimal   @db.Decimal(12, 2) @default(0)
  netSavings     Decimal   @db.Decimal(12, 2) @default(0)
  budgetStatus   String    @default("ON_TRACK") // 'UNDER_BUDGET', 'ON_TRACK', 'OVER_BUDGET'
  generatedAt    DateTime  @default(now())
  reportData     Json
  aiInsights     Json?
}

model Notification {
  id             String    @id @default(uuid())
  user           User      @relation(fields: [userId], references: [id])
  userId         String
  title           String
  message         String
  type            String    // 'BUDGET_ALERT', 'RECURRING_EXPENSE', 'REPORT_READY', 'AI_SUGGESTION'
  isRead          Boolean   @default(false)
  createdAt       DateTime  @default(now())
}
